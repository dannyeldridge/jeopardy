{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["JeopardyCard","props","category","question","answer","value","showAnswer","className","style","toUpperCase","App","useState","clue","setClue","guess","setGuess","message","setMessage","points","setPoints","gameState","setGameState","addPoints","amount","nextClue","fetch","then","json","response","generatedClue","title","isAnswerCorrect","toLowerCase","onSubmit","e","preventDefault","disabled","onChange","event","target","type","onClick","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1a51d9ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction getClue() {\n  return fetch('http://jservice.io/api/random');\n}\n\nfunction JeopardyCard(props) {\n  const {\n    category,\n    question,\n    answer,\n    value,\n    showAnswer\n  } = props;\n\n  return (\n    <div>\n      <div className=\"Jeopardy-box flex-box-column\" style={{\"height\": \"7em\"}}>\n        <div style={{\"font-size\": \"2em\", \"text-shadow\": \"2px 2px 0px black\", \"font-weight\": \"bold\"}}>{category.toUpperCase()} ({value})</div>\n      </div>\n      <div className=\"Jeopardy-box flex-box-column\" style={{\"height\": \"18em\", \"overflow-y\": \"auto\"}}>\n        <div style={{\"font-size\": \"2em\", \"padding\": \"0.5em\"}}>{showAnswer ? answer : question}</div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  const START = 0;\n  const QUESTION = 1;\n  const GUESSED = 2;\n\n  const [clue, setClue] = useState({\n    question: \"...\",\n    answer: \"...\",\n    category: \"...\",\n    value: \"\",\n    showAnswer: false\n  })\n  const [guess, setGuess] = useState('');\n  const [message, setMessage] = useState('Welcome to Jeopardy!');\n  const [points, setPoints] = useState(0);\n  const [gameState, setGameState] = useState(START);\n\n  const addPoints = (amount) => {\n    setPoints(points + amount);\n  }\n\n  const nextClue = () => {\n    setGuess(\"\");\n    setGameState(QUESTION);\n    getClue().then((clue) => {\n      clue.json().then((response) => {\n        const generatedClue = response[0];\n        setClue({\n          question: generatedClue.question,\n          answer: generatedClue.answer,\n          category: generatedClue.category.title,\n          value: generatedClue.value,\n          showAnswer: false\n        })\n        setMessage(`\"${generatedClue.category.title}\" for ${generatedClue.value}...`)\n      });\n    });\n  }\n\n  const initializeClue = () => {\n    nextClue();\n  }\n\n  const handleGuess = () => {\n    setGameState(GUESSED);\n    if (isAnswerCorrect()) {\n      setMessage(\"Right!\")\n      addPoints(clue.value)\n    } else {\n      setMessage(\"Wrong!\")\n      addPoints(clue.value * -1);\n    }\n  }\n\n  const handleCorrectOverride = () => {\n    if (!isAnswerCorrect()) {\n      setMessage(\"Incorrectly marked as wrong... points added back to your score!\")\n      addPoints(2 * clue.value);\n      setGuess(clue.answer);\n    }\n  }\n\n  if (gameState === START) {\n    setGameState(QUESTION);\n    initializeClue();\n  }\n\n  const toggleShowAnswer = () => {\n    console.log(\"showing answer\");\n    setClue({...clue, showAnswer: !clue.showAnswer})\n  }\n\n  const isAnswerCorrect = () => {\n    return guess.toLowerCase() === clue.answer.toLowerCase();\n  }\n\n  return (\n    <div className=\"App flex-box-column\" style={{\"background-color\": \"#00003A\", \"minHeight\": \"100%\"}}>\n      <div className=\"Jeopardy-title\">\n        Jeopardy\n      </div>\n      <div>\n        <JeopardyCard value={clue.value} category={clue.category} question={clue.question} answer={clue.answer} showAnswer={clue.showAnswer}/>\n      </div>\n      <div className='form-group form-inline mt-4'>\n        <form onSubmit={e => e.preventDefault()}>\n          <input disabled={gameState === GUESSED} className='form-control' value={guess} onChange={(event) => {setGuess(event.target.value)}} type=\"text\" />\n          <button disabled={gameState === GUESSED} className='btn btn-primary mr-2' onClick={handleGuess}>Guess</button>\n          {\n            gameState === GUESSED && !isAnswerCorrect() &&\n            <button onClick={handleCorrectOverride} className='btn btn-secondary' >I was right!</button>\n          }\n        </form>\n      </div>\n      <div>\n        <button className='btn btn-secondary mr-2' type=\"button\" onClick={toggleShowAnswer}>\n          {\n            !clue.showAnswer ? \"Show Answer\" : \"Show Question\"\n          }\n        </button>\n        <button className='btn btn-secondary' type=\"button\" onClick={nextClue}>\n          {\n            gameState === QUESTION ? \"Skip Clue\" : \"Next Clue\"\n          }\n        </button>\n      </div>\n      <div>\n        <p className='mt-4 h4'>{message}</p>\n      </div>\n      <div>\n        <p className='mt-4 h4'>You have: {points} points</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}